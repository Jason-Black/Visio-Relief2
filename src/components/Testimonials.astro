---
const testimonials = [
  {
    id: 1,
    name: "Sarah M.",
    role: "Marketing Executive",
    quote: "Visio Relief transformed my approach to anxiety. The techniques I learned helped me reclaim my focus at work and find balance in my personal life.",
    image: "https://images.unsplash.com/photo-1580489944761-15a19d654956?w=150&h=150&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
  },
  {
    id: 2,
    name: "Michael K.",
    role: "Software Engineer",
    quote: "After struggling with burnout for years, the Visio Relief coaching system helped me identify my emotional triggers and develop sustainable coping strategies.",
    image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
  },
  {
    id: 3,
    name: "Emma R.",
    role: "Healthcare Professional",
    quote: "The clarity I gained through Visio Relief's approach was life-changing. I can now manage stressful situations with a calm mind and clear perspective.",
    image: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
  }
];
---

<section id="testimonials" class="py-20 bg-white">
  <div class="container mx-auto px-6">
    <h2 class="text-3xl md:text-4xl font-bold text-center text-gray-800 mb-16">What Our Clients Say</h2>

    <div class="relative max-w-4xl mx-auto">
      <div class="overflow-hidden">
        <div class="carousel-container flex transition-all duration-500">
          {testimonials.map((testimonial) => (
            <div class="min-w-full px-4">
              <div class="card bg-gradient-to-br from-white to-blue-50 p-8 md:p-12 rounded-lg shadow-lg">
                <p class="text-lg md:text-xl italic text-gray-700 mb-6">"{testimonial.quote}"</p>
                
                <div class="flex items-center gap-4">
                  <div class="w-16 h-16 flex-shrink-0">
                    <img 
                      src={testimonial.image} 
                      alt={testimonial.name}
                      class="w-full h-full object-cover rounded-full border-2 border-primary"
                      loading="lazy"
                    />
                  </div>
                  <div>
                    <div class="font-semibold text-gray-800">{testimonial.name}</div>
                    <div class="text-gray-500 text-sm">{testimonial.role}</div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <button 
        class="carousel-button prev absolute left-0 top-1/2 -translate-y-1/2 -translate-x-5 md:-translate-x-10 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 transition-colors"
        aria-label="Previous testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
      </button>

      <button 
        class="carousel-button next absolute right-0 top-1/2 -translate-y-1/2 translate-x-5 md:translate-x-10 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 transition-colors"
        aria-label="Next testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>
      </button>

      <div class="carousel-indicators flex justify-center mt-8 gap-2">
        {testimonials.map((_, index) => (
          <button
            class={`carousel-indicator w-3 h-3 rounded-full ${index === 0 ? "bg-primary" : "bg-gray-300"}`}
            aria-label={`Go to testimonial ${index + 1}`}
          />
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carouselContainer = document.querySelector('.carousel-container') as HTMLElement;
    const items = document.querySelectorAll('.min-w-full');
    const prevBtn = document.querySelector('.carousel-button.prev');
    const nextBtn = document.querySelector('.carousel-button.next');
    const indicators = document.querySelectorAll('.carousel-indicator');
    
    let currentIndex = 0;
    let isAnimating = false;
    const animationDuration = 500; // match the duration-500 class in the HTML
    
    // Initialize the carousel
    if (carouselContainer) {
      carouselContainer.style.transform = 'translateX(0)';
    }
    
    function updateCarousel() {
      if (!carouselContainer || isAnimating) return;
      
      isAnimating = true;
      const offset = currentIndex * -100;
      carouselContainer.style.transform = `translateX(${offset}%)`;
      
      // Update indicators
      indicators.forEach((indicator, index) => {
        if (indicator instanceof HTMLElement) {
          if (index === currentIndex) {
            indicator.classList.remove('bg-gray-300');
            indicator.classList.add('bg-primary');
          } else {
            indicator.classList.remove('bg-primary');
            indicator.classList.add('bg-gray-300');
          }
        }
      });
      
      // Reset animation flag after transition
      setTimeout(() => {
        isAnimating = false;
      }, animationDuration);
    }
    
    function goToSlide(index: number) {
      if (index < 0) {
        currentIndex = items.length - 1;
      } else if (index >= items.length) {
        currentIndex = 0;
      } else {
        currentIndex = index;
      }
      updateCarousel();
    }
    
    // Add click event listeners for navigation
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        goToSlide(currentIndex - 1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        goToSlide(currentIndex + 1);
      });
    }
    
    // Add click event listeners for indicators
    indicators.forEach((indicator, idx) => {
      indicator.addEventListener('click', () => {
        goToSlide(idx);
      });
    });
    
    // Touch events for mobile swiping
    let touchStartX = 0;
    let touchEndX = 0;
    const carouselViewport = document.querySelector('.overflow-hidden');
    
    if (carouselViewport) {
      carouselViewport.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });
      
      carouselViewport.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true });
    }
    
    function handleSwipe() {
      const swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe left, go to next
        goToSlide(currentIndex + 1);
      }
      
      if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe right, go to previous
        goToSlide(currentIndex - 1);
      }
    }
    
    // Auto-advance carousel
    let autoplayInterval: number | undefined;
    
    function startAutoplay() {
      autoplayInterval = window.setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 8000); // Change slide every 8 seconds, matching Testimonials2
    }
    
    function stopAutoplay() {
      if (autoplayInterval) {
        window.clearInterval(autoplayInterval);
      }
    }
    
    // Enable autoplay
    startAutoplay();
    
    // Pause autoplay on hover/touch
    const carousel = document.querySelector('.relative');
    if (carousel) {
      carousel.addEventListener('mouseenter', stopAutoplay);
      carousel.addEventListener('mouseleave', startAutoplay);
      carousel.addEventListener('touchstart', stopAutoplay, { passive: true });
      carousel.addEventListener('touchend', startAutoplay, { passive: true });
    }
  });
</script>

<style>
  /* Add custom CSS for elements that might need additional styling */
  .bg-primary {
    background-color: var(--color-primary);
  }
  
  .border-primary {
    border-color: var(--color-primary);
  }
  
  .text-primary {
    color: var(--color-primary);
  }
  
  .bg-gradient-to-br.from-white.to-blue-50 {
    background: linear-gradient(to bottom right, white, #eff6ff);
  }
  
  /* Ensure proper transitions */
  .carousel-container {
    transition: transform 0.5s cubic-bezier(0.25, 1, 0.5, 1);
  }
</style>